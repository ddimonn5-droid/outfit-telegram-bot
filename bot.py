import os
import json
import logging
import httpx
from telegram import Update
from telegram.ext import Application, MessageHandler, ContextTypes, filters
from openai import OpenAI

# ====== –ö–æ–Ω—Ñ–∏–≥ ======
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.getenv("PORT", 8443))  # Render –¥–∞—ë—Ç –ø–æ—Ä—Ç
APP_URL = os.getenv("RENDER_EXTERNAL_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä https://outfit-bot.onrender.com

client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# ====== GPT ======
async def gpt_outfit_request(user_text: str):
    """–ó–∞–ø—Ä–æ—Å –∫ GPT –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∞—É—Ç—Ñ–∏—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–µ—â–µ–π –∏–ª–∏ []"""
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –º–æ–¥–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç. "
                        "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ: "
                        "{\"items\":[{\"name\":\"–ù–∞–∑–≤–∞–Ω–∏–µ\",\"link\":\"https://—Å—Å—ã–ª–∫–∞\"}]}. "
                        "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏–∑ Zara, Lyst, Grailed, Bershka. "
                        "–ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Å—Å—ã–ª–∫–∏. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç."
                    )
                },
                {"role": "user", "content": f"–ü–æ–¥–±–µ—Ä–∏ –∞—É—Ç—Ñ–∏—Ç: {user_text}"}
            ],
            max_tokens=400,
        )
        content = response.choices[0].message.content
        data = json.loads(content)
        items = data.get("items", [])
        return items if isinstance(items, list) else []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        return []


# ====== –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ ======
async def validate_links(items):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Å—ã–ª–∫–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ)"""
    valid_items = []
    async with httpx.AsyncClient(timeout=10) as client:
        for it in items:
            url = it.get("link", "")
            if not url.startswith("http"):
                continue
            try:
                r = await client.head(url, follow_redirects=True)
                if r.status_code == 200:
                    valid_items.append(it)
            except Exception:
                continue
    return valid_items


# ====== Handler —Å–æ–æ–±—â–µ–Ω–∏–π ======
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    await update.message.reply_text("‚ú® –î—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ–∏–º –∞—É—Ç—Ñ–∏—Ç–æ–º...")

    items = await gpt_outfit_request(user_text)
    items = await validate_links(items)  # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏

    if not items:
        await update.message.reply_text("üò¢ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∏–ª—è.")
        return

    reply_lines = [f"üëó {it.get('name','–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ‚Üí {it.get('link','')}" for it in items]
    reply_text = "–í–æ—Ç —á—Ç–æ —è –ø–æ–¥–æ–±—Ä–∞–ª:\n\n" + "\n".join(reply_lines)
    await update.message.reply_text(reply_text)


# ====== Error handler ======
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Unhandled exception", exc_info=context.error)
    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text("‚ö†Ô∏è –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


# ====== Main ======
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ Webhook...")

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TELEGRAM_BOT_TOKEN,
        webhook_url=f"{APP_URL}/{TELEGRAM_BOT_TOKEN}"
    )


if __name__ == "__main__":
    main()
