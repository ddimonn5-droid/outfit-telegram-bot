import os
import json
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from openai import OpenAI

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É (fallback JSON)
with open("outfits.json", "r", encoding="utf-8") as f:
    OUTFITS = json.load(f)


# ------------------------------
# GPT –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É—Ç—Ñ–∏—Ç–∞
async def gpt_outfit_request(style: str):
    """–ó–∞–ø—Ä–æ—Å –∫ GPT –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∞—É—Ç—Ñ–∏—Ç–∞"""
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã —Å—Ç–∏–ª–∏—Å—Ç. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ: "
                        "{\"items\": [{\"name\": \"...\", \"link\": \"...\"}]}"
                    )
                },
                {
                    "role": "user",
                    "content": f"–ü–æ–¥–±–µ—Ä–∏ –∞—É—Ç—Ñ–∏—Ç –≤ —Å—Ç–∏–ª–µ {style} –∏–∑ –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω–æ–≤ (ASOS, Zara, H&M, Farfetch)."
                }
            ],
            max_tokens=300,
        )
        content = response.choices[0].message.content
        data = json.loads(content)
        return data.get("items", [])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        return []


# ------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Casual", callback_data="style_casual")],
        [InlineKeyboardButton("Party", callback_data="style_party")],
        [InlineKeyboardButton("Office", callback_data="style_office")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∞—É—Ç—Ñ–∏—Ç–∞:", reply_markup=reply_markup)


# ------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def style_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    style = query.data.replace("style_", "")

    # 1. –ü—Ä–æ–±—É–µ–º GPT
    items = await gpt_outfit_request(style)

    # 2. –ï—Å–ª–∏ GPT –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞ ‚Üí –±–µ—Ä—ë–º outfits.json
    if not items:
        items = OUTFITS.get(style, [])

    if not items:
        await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –≤–µ—â–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∏–ª—è üò¢")
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç
    media_group = []
    text_items = []

    for item in items[:10]:  # –º–∞–∫—Å–∏–º—É–º 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        link = item.get("link", "")
        name = item.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

        if link.endswith((".jpg", ".jpeg", ".png")):
            media_group.append(InputMediaPhoto(media=link, caption=name))
        else:
            text_items.append(f"{name}: {link}")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
    if media_group:
        await query.message.reply_media_group(media_group)

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
    if text_items:
        await query.message.reply_text("\n".join(text_items))


# ------------------------------
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(style_handler))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
