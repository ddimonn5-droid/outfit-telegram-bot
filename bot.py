import os
import json
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import openai

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É (fallback JSON)
with open("outfits.json", "r", encoding="utf-8") as f:
    OUTFITS = json.load(f)


# ------------------------------
# GPT –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É—Ç—Ñ–∏—Ç–∞
async def gpt_outfit_request(style: str):
    """–ó–∞–ø—Ä–æ—Å –∫ GPT –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∞—É—Ç—Ñ–∏—Ç–∞"""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –º–æ–¥–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ JSON —Ñ–æ—Ä–º–∞—Ç–æ–º."},
                {"role": "user", "content": f"–ü–æ–¥–±–µ—Ä–∏ –∞—É—Ç—Ñ–∏—Ç –≤ —Å—Ç–∏–ª–µ {style}. –§–æ—Ä–º–∞—Ç: "
                                            "{\"items\": [{\"name\": \"...\", \"link\": \"...\"}]}"}
            ],
            max_tokens=300
        )
        # GPT –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç ‚Üí –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        content = response["choices"][0]["message"]["content"]
        data = json.loads(content)
        return data.get("items", [])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        return []


# ------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Casual", callback_data="style_casual")],
        [InlineKeyboardButton("Party", callback_data="style_party")],
        [InlineKeyboardButton("Office", callback_data="style_office")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∞—É—Ç—Ñ–∏—Ç–∞:", reply_markup=reply_markup)


# ------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def style_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    style = query.data.replace("style_", "")

    # 1. –ü—Ä–æ–±—É–µ–º GPT
    items = await gpt_outfit_request(style)

    # 2. –ï—Å–ª–∏ GPT –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞ ‚Üí –±–µ—Ä—ë–º outfits.json
    if not items:
        items = OUTFITS.get(style, [])

    if not items:
        await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –≤–µ—â–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∏–ª—è üò¢")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∞–ª—å–±–æ–º
    media_group = []
    for item in items[:10]:  # –º–∞–∫—Å–∏–º—É–º 10 –∫–∞—Ä—Ç–∏–Ω–æ–∫
        if "link" in item:
            media_group.append(InputMediaPhoto(media=item["link"], caption=item.get("name", "")))

    if media_group:
        await query.message.reply_media_group(media_group)


# ------------------------------
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(style_handler))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
