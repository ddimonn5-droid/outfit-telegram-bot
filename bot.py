import os
import re
import logging
import asyncio
import httpx
import requests
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# ====== –ö–æ–Ω—Ñ–∏–≥ ======
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
XAI_API_KEY = os.getenv("XAI_API_KEY")
PORT = int(os.getenv("PORT", 8443))
APP_URL = os.getenv("RENDER_EXTERNAL_URL")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ====== –£—Ç–∏–ª–∏—Ç—ã ======
URL_RE = re.compile(r"(https?://[^\s\)\]\>]+)")
IMAGE_EXT_RE = re.compile(r"\.(?:jpg|jpeg|png|gif|webp|bmp)(?:$|\?)", re.I)
PRODUCT_HINTS = ["product", "productpage", "item", "detail", "p/", "sku", "id=", "prd", "listing"]

def extract_urls(text: str):
    return URL_RE.findall(text or "")

def is_probably_product(url: str) -> bool:
    if url.endswith("/"):
        return False
    if any(h in url.lower() for h in PRODUCT_HINTS):
        return True
    return False

async def validate_url(url: str, timeout: int = 8) -> bool:
    if IMAGE_EXT_RE.search(url):
        return False
    try:
        async with httpx.AsyncClient(timeout=timeout) as client:
            r = await client.get(url, follow_redirects=True)
            if r.status_code == 200:
                ctype = r.headers.get("content-type", "")
                if "text/html" in ctype:
                    return True
    except Exception:
        return False
    return False

async def filter_and_validate_urls(candidates: list[str], needed: int = 5) -> list[str]:
    out, seen = [], set()
    sem = asyncio.Semaphore(20)

    async def check(url):
        async with sem:
            if not is_probably_product(url):
                return None
            ok = await validate_url(url)
            return url if ok else None

    tasks = [asyncio.create_task(check(u)) for u in candidates]
    for task in asyncio.as_completed(tasks):
        res = await task
        if res and res not in seen:
            seen.add(res)
            out.append(res)
            if len(out) >= needed:
                break
    return out

# ====== Grok ======
def grok_call(payload: dict) -> dict:
    url = "https://api.x.ai/v1/chat/completions"
    headers = {"Authorization": f"Bearer {XAI_API_KEY}", "Content-Type": "application/json"}
    r = requests.post(url, headers=headers, json=payload, timeout=60)
    r.raise_for_status()
    return r.json()

async def grok_outfit_request(user_text: str, strict: bool = False) -> dict:
    sys_prompt = (
        "–¢—ã –º–æ–¥–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç. –ü–æ–¥–±–∏—Ä–∞–π —Å—Ç—Ä–æ–≥–æ 5 –≤–µ—â–µ–π: üëï —Ñ—É—Ç–±–æ–ª–∫–∞, üëñ –¥–∂–∏–Ω—Å—ã, üëü –∫—Ä–æ—Å—Å–æ–≤–∫–∏, üß• –∫—É—Ä—Ç–∫–∞, üéí –∞–∫—Å–µ—Å—Å—É–∞—Ä.\n"
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: Emoji –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî —Å—Å—ã–ª–∫–∞.\n\n"
        "‚ÄºÔ∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "- –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ product pages (—Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤), –Ω–µ –≥–ª–∞–≤–Ω—ã–µ, –Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n"
        "- –ú–∞–≥–∞–∑–∏–Ω—ã: Zara, H&M, Bershka, ASOS, Lyst, Grailed, Zalando.\n"
        "- –°—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å product ID –∏–ª–∏ slug (–Ω–∞–ø—Ä–∏–º–µ—Ä 'productpage.12345', 'id=12345').\n"
    )
    if strict:
        sys_prompt += "\n–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ product page URL —Ç–æ–≤–∞—Ä–æ–≤. –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –≥–ª–∞–≤–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü."

    payload = {
        "model": "grok-4",
        "messages": [
            {"role": "system", "content": sys_prompt},
            {"role": "user", "content": f"–ü–æ–¥–±–µ—Ä–∏ –∞—É—Ç—Ñ–∏—Ç: {user_text}"}
        ],
        "max_tokens": 600,
        "search_parameters": {
            "mode": "on",
            "return_citations": True,
            "max_search_results": 20,
            "sources": [{"type": "web"}]
        },
        "temperature": 0.2
    }
    return grok_call(payload)

# ====== –ö–æ–º–∞–Ω–¥—ã ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä: –∫—ç–∂—É–∞–ª", callback_data="casual")],
                [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")]]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å—Ç–∏–ª–∏—Å—Ç (–Ω–∞ Grok).\n"
        "–ù–∞–ø–∏—à–∏ —Å—Ç–∏–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—É–ª–∏—á–Ω—ã–π —Å–ø–æ—Ä—Ç¬ª, ¬´–æ—Ñ–∏—Å –ª–µ—Ç–æ–º¬ª, ¬´–≤–µ—á–µ—Ä–∏–Ω–∫–∞ –≤ —Å—Ç–∏–ª–µ 90-—Ö¬ª), "
        "–∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –∞—É—Ç—Ñ–∏—Ç.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –≤—Å–µ–≥–¥–∞ –≤–µ—Ä–Ω—É 5 —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ product pages (—Ñ—É—Ç–±–æ–ª–∫–∞, –¥–∂–∏–Ω—Å—ã, –∫—Ä–æ—Å—Å–æ–≤–∫–∏, –∫—É—Ä—Ç–∫–∞, –∞–∫—Å–µ—Å—Å—É–∞—Ä)."
    )

# ====== –°–æ–æ–±—â–µ–Ω–∏—è ======
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()
    await update.message.reply_text("‚ú® –ò—â—É —Ä–µ–∞–ª—å–Ω—ã–µ product pages...")

    validated = []
    attempts = 0

    while len(validated) < 5 and attempts < 3:  # –¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫
        try:
            raw = await grok_outfit_request(user_text, strict=(attempts > 0))
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ Grok")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

        choice = (raw.get("choices") or [{}])[0]
        msg = choice.get("message") or {}
        text = msg.get("content") or ""
        candidates = extract_urls(text)

        new_validated = await filter_and_validate_urls(candidates, needed=5)
        for v in new_validated:
            if v not in validated:
                validated.append(v)
        attempts += 1

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ 5 —Å—Å—ã–ª–æ–∫
    if len(validated) < 5:
        # –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—ã–µ 5 –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∫–∞–∫ –µ—Å—Ç—å
        validated = (validated + candidates)[:5]

    # –æ—Ñ–æ—Ä–º–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ
    icons = ["üëï", "üëñ", "üëü", "üß•", "üéí"]
    lines = []
    for i, url in enumerate(validated[:5]):
        lines.append(f"{icons[i]} –¢–æ–≤–∞—Ä ‚Äî {url}")

    reply = "–í–æ—Ç —Ç–≤–æ–π –∞—É—Ç—Ñ–∏—Ç:\n\n" + "\n".join(lines)
    await update.message.reply_text(reply)

# ====== Main ======
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ Webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TELEGRAM_BOT_TOKEN,
        webhook_url=f"{APP_URL}/{TELEGRAM_BOT_TOKEN}"
    )

if __name__ == "__main__":
    main()
