import os
import re
import random
import logging
import httpx
import requests
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# ====== –ö–æ–Ω—Ñ–∏–≥ ======
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
XAI_API_KEY = os.getenv("XAI_API_KEY")
PORT = int(os.getenv("PORT", 8443))
APP_URL = os.getenv("RENDER_EXTERNAL_URL")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ====== Fallback ======
FALLBACK_OUTFITS = [
    "üëï –ë–µ–ª–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ ‚Äî https://i.imgur.com/Qr71crq.jpg",
    "üëñ –°–∏–Ω–∏–µ –¥–∂–∏–Ω—Å—ã ‚Äî https://i.imgur.com/0rVeh4A.jpg",
    "üëü –ö–µ–¥—ã Converse ‚Äî https://i.imgur.com/XxxnmUi.jpg",
    "üß• –ß—ë—Ä–Ω–∞—è –∫—É—Ä—Ç–∫–∞ ‚Äî https://i.imgur.com/zR5yRZr.jpg",
    "üéí –†—é–∫–∑–∞–∫ ‚Äî https://i.imgur.com/Zk4N1qH.jpg",
]

# ====== Grok ======
async def grok_outfit_request(user_text: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ Grok API"""
    try:
        url = "https://api.x.ai/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {XAI_API_KEY}",
            "Content-Type": "application/json",
        }
        payload = {
            "model": "grok-4",
            "messages": [
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –º–æ–¥–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç. "
                        "–û—Ç–≤–µ—á–∞–π —Å–ø–∏—Å–∫–æ–º –∏–∑ —Ä–æ–≤–Ω–æ 5 –ø—É–Ω–∫—Ç–æ–≤: –ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏ ‚Äî —Å—Å—ã–ª–∫–∞. "
                        "–ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω—ã Zara, Lyst, Grailed, Bershka. "
                        "–ï–°–õ–ò –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–∏–¥—É–º–∞–π —Å—Å—ã–ª–∫—É."
                    ),
                },
                {"role": "user", "content": f"–ü–æ–¥–±–µ—Ä–∏ –∞—É—Ç—Ñ–∏—Ç: {user_text}"},
            ],
            "max_tokens": 600,
            "search_parameters": {
                "mode": "on",
                "return_citations": True,
                "max_search_results": 8,
                "sources": [{"type": "web"}, {"type": "news"}],
            },
        }
        r = requests.post(url, headers=headers, json=payload, timeout=60)
        r.raise_for_status()
        j = r.json()
        choice = (j.get("choices") or [{}])[0]
        msg = choice.get("message", {})
        text = msg.get("content") or choice.get("text") or ""
        return text.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Grok: {e}")
        return ""

# ====== –£—Ç–∏–ª–∏—Ç—ã ======
def extract_urls(text: str):
    return re.findall(r"(https?://\S+)", text or "")

async def validate_text_links(text: str) -> list[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Å—ã–ª–∫–∏ HEAD-–∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    urls = extract_urls(text)
    valid_urls = set()
    async with httpx.AsyncClient(timeout=10) as client:
        for url in urls:
            try:
                r = await client.head(url, follow_redirects=True)
                if r.status_code == 200:
                    valid_urls.add(url)
            except Exception:
                continue

    lines = text.splitlines()
    clean_lines = []
    for line in lines:
        if any(url in line for url in valid_urls):
            clean_lines.append(line)

    return clean_lines

# ====== –ö–æ–º–∞–Ω–¥–∞ /start ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä: –∫—ç–∂—É–∞–ª", callback_data="casual")],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")],
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å—Ç–∏–ª–∏—Å—Ç (–Ω–∞ Grok).\n\n"
        "–ù–∞–ø–∏—à–∏ —Å—Ç–∏–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—É–ª–∏—á–Ω—ã–π —Å–ø–æ—Ä—Ç¬ª, ¬´–æ—Ñ–∏—Å –ª–µ—Ç–æ–º¬ª, ¬´–≤–µ—á–µ—Ä–∏–Ω–∫–∞ –≤ —Å—Ç–∏–ª–µ 90-—Ö¬ª), "
        "–∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ–±–µ –∞—É—Ç—Ñ–∏—Ç.",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )

# ====== –ö–æ–º–∞–Ω–¥–∞ /help ======
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n\n"
        "1. –ù–∞–ø–∏—à–∏ —Å—Ç–∏–ª—å –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é.\n"
        "2. –Ø –≤–µ—Ä–Ω—É —Å–ø–∏—Å–æ–∫ –≤–µ—â–µ–π —Å–æ —Å—Å—ã–ª–∫–∞–º–∏.\n"
        "3. –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ä–∞–±–æ—á–∏–µ ‚Äî –¥–æ–±–∞–≤–ª—é –∑–∞–ø–∞—Å–Ω—ã–µ."
    )

# ====== Handler —Å–æ–æ–±—â–µ–Ω–∏–π ======
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    await update.message.reply_text("‚ú® –î—É–º–∞—é –Ω–∞–¥ —Ç–≤–æ–∏–º –æ–±—Ä–∞–∑–æ–º (—á–µ—Ä–µ–∑ Grok)...")

    grok_result = await grok_outfit_request(user_text)
    valid_lines = await validate_text_links(grok_result)

    # –¥–æ–±–∏–≤–∞–µ–º –¥–æ 5 –ø—É–Ω–∫—Ç–æ–≤ fallback'–æ–º
    while len(valid_lines) < 5:
        valid_lines.append(random.choice(FALLBACK_OUTFITS))

    reply_text = "–í–æ—Ç —á—Ç–æ —è –ø–æ–¥–æ–±—Ä–∞–ª:\n\n" + "\n".join(valid_lines[:5])
    await update.message.reply_text(reply_text)

# ====== Main ======
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ Webhook...")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TELEGRAM_BOT_TOKEN,
        webhook_url=f"{APP_URL}/{TELEGRAM_BOT_TOKEN}",
    )

if __name__ == "__main__":
    main()
