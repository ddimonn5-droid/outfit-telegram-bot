# Monkey-patch –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å imghdr –∏ Updater
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∂–∞–µ–º monkey-patch –¥–ª—è imghdr
try:
    from imghdr_monkeypatch import ImghdrModule
    sys.modules['imghdr'] = ImghdrModule()
    print("‚úÖ Monkey-patch –¥–ª—è imghdr –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è monkey-patch: {e}")

# –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é API
import telegram
telegram.__version__ = "13.15"


import os
import sys
from telegram.ext import Updater, CommandHandler, MessageHandler, filters, CallbackContext

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
    sys.exit(1)

# ... –≤–∞—à –∫–æ–¥ —Å OUTFITS ...

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update, context: CallbackContext):
    welcome_text = (
        "üëï *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∞—É—Ç—Ñ–∏—Ç–æ–≤!* üëñ\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –æ–¥–µ–∂–¥—ã.\n\n"
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/styles - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏\n"
        "/help - –ø–æ–º–æ—â—å\n\n"
        "üí° *–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å—Ç–∏–ª–µ–π:*\n"
        "‚Ä¢ –∫—ç–∂—É–∞–ª\n"
        "‚Ä¢ –≤–µ—á–µ—Ä–∏–Ω–∫–∞\n"
        "‚Ä¢ –æ—Ñ–∏—Å\n\n"
        "–ò —è –ø–æ–∫–∞–∂—É –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–º–ø–ª–µ–∫—Ç –æ–¥–µ–∂–¥—ã!"
    )
    
    update.message.reply_text(welcome_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /help
def help_command(update, context: CallbackContext):
    help_text = (
        "ü§ñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "1. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–∫—ç–∂—É–∞–ª')\n"
        "2. –Ø –ø—Ä–∏—à–ª—é –≤–∞–º –ø–æ–¥–±–æ—Ä–∫—É –æ–¥–µ–∂–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∏–ª—è\n"
        "3. –ö–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–¥–µ–∂–¥—ã\n\n"
        "üìù *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/styles - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç–∏–ª–∏\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:* " + ", ".join(f"'{key}'" for key in OUTFITS.keys())
    )
    
    update.message.reply_text(help_text, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /styles
def list_styles(update, context: CallbackContext):
    styles_text = "üé® *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ –æ–¥–µ–∂–¥—ã:*\n\n"
    for style in OUTFITS.keys():
        styles_text += f"‚Ä¢ {style.capitalize()} - {len(OUTFITS[style])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
    
    styles_text += "\nüìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞—É—Ç—Ñ–∏—Ç!"
    
    update.message.reply_text(styles_text, parse_mode='Markdown')

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update, context: CallbackContext):
    try:
        query = update.message.text.lower().strip()
        
        if query not in OUTFITS:
            available_styles = ", ".join(f"'{key}'" for key in OUTFITS.keys())
            update.message.reply_text(
                f"‚ùå –°—Ç–∏–ª—å '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏: {available_styles}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /styles —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫."
            )
            return

        outfit = OUTFITS[query]
        
        update.message.reply_text(
            f"üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∞—É—Ç—Ñ–∏—Ç –¥–ª—è —Å—Ç–∏–ª—è '{query}'...\n"
            f"üì¶ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(outfit)}"
        )

        for item in outfit:
            try:
                update.message.reply_photo(
                    photo=item["url"],
                    caption=f"üëï {item['name']}\n#{(query)}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {item['name']}")

        update.message.reply_text(
            f"‚úÖ –ê—É—Ç—Ñ–∏—Ç –¥–ª—è —Å—Ç–∏–ª—è '{query}' –≥–æ—Ç–æ–≤!\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        )

    except Exception as e:
        update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        print(f"Unexpected error: {e}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    try:
        # –°–¢–ê–†–´–ô –°–ò–ù–¢–ê–ö–°–ò–° - –∏—Å–ø–æ–ª—å–∑—É–µ–º Updater
        updater = Updater(TOKEN, use_context=True)
        dispatcher = updater.dispatcher

        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(CommandHandler("help", help_command))
        dispatcher.add_handler(CommandHandler("styles", list_styles))
        dispatcher.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:", list(OUTFITS.keys()))
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        updater.start_polling()
        updater.idle()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
