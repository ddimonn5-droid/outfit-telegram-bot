import os
import json
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from openai import OpenAI

# ====== –ö–æ–Ω—Ñ–∏–≥ ======
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ====== –ë–∞–∑–∞ (fallback) ======
with open("outfits.json", "r", encoding="utf-8") as f:
    OUTFITS = json.load(f)

# ====== GPT ======
async def gpt_outfit_request(style: str):
    """–ó–∞–ø—Ä–æ—Å –∫ GPT –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∞—É—Ç—Ñ–∏—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç list[{"name","link"}] –∏–ª–∏ []"""
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã —Å—Ç–∏–ª–∏—Å—Ç. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ JSON: "
                        "{\"items\": [{\"name\": \"...\", \"link\": \"...\"}]}"
                    )
                },
                {
                    "role": "user",
                    "content": f"–ü–æ–¥–±–µ—Ä–∏ –∞—É—Ç—Ñ–∏—Ç –≤ —Å—Ç–∏–ª–µ {style} –∏–∑ –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω–æ–≤ (ASOS, Zara, H&M, Farfetch)."
                }
            ],
            max_tokens=300,
        )
        content = response.choices[0].message.content
        data = json.loads(content)
        items = data.get("items", [])
        # –ú–∏–Ω–∏-–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if not isinstance(items, list):
            return []
        cleaned = []
        for it in items:
            name = (it.get("name") or "").strip()
            link = (it.get("link") or "").strip()
            if name and link:
                cleaned.append({"name": name, "link": link})
        return cleaned
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        return []

# ====== Handlers ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Casual", callback_data="style_casual")],
        [InlineKeyboardButton("Party", callback_data="style_party")],
        [InlineKeyboardButton("Office", callback_data="style_office")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∞—É—Ç—Ñ–∏—Ç–∞:", reply_markup=reply_markup)

async def style_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    style = query.data.replace("style_", "")

    # 1) –ü—Ä–æ–±—É–µ–º GPT
    items = await gpt_outfit_request(style)

    # 2) –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –±–µ—Ä—ë–º –∏–∑ JSON
    if not items:
        items = OUTFITS.get(style, [])

    if not items:
        await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –≤–µ—â–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∏–ª—è üò¢")
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç (—á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å webpage_media_empty)
    media_group = []
    text_items = []
    for item in items[:10]:  # –º–∞–∫—Å–∏–º—É–º 10
        link = item.get("link", "")
        name = item.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

        if link.lower().endswith((".jpg", ".jpeg", ".png")):
            media_group.append(InputMediaPhoto(media=link, caption=name))
        else:
            text_items.append(f"{name}: {link}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ-–∞–ª—å–±–æ–º
    if media_group:
        await query.message.reply_media_group(media_group)

    # –ò —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –±—ã–ª–∏)
    if text_items:
        await query.message.reply_text("\n".join(text_items))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å –∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Unhandled exception in handler", exc_info=context.error)
    try:
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text("–û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —É–∂–µ —á–∏–Ω–∏–º ‚öôÔ∏è")
    except Exception:
        pass

# –•—É–∫ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: —Å–Ω–µ—Å—ë–º –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã polling –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª
async def post_init(application: Application):
    try:
        await application.bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook —É–¥–∞–ª—ë–Ω (drop_pending_updates=True). –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ polling.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook: {e}")

def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—É–∫ post_init
    app.post_init = post_init

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(style_handler))
    app.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    # drop_pending_updates=True –∑–∞–æ–¥–Ω–æ —á–∏—Å—Ç–∏—Ç –æ—á–µ—Ä–µ–¥—å
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
