import json
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å GPT:
# import openai
# openai.api_key = "YOUR_API_KEY"

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É —Å—Ç–∏–ª–µ–π
with open("outfits.json", "r", encoding="utf-8") as f:
    OUTFITS = json.load(f)

# ------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Casual", callback_data="style_casual")],
        [InlineKeyboardButton("Party", callback_data="style_party")],
        [InlineKeyboardButton("Office", callback_data="style_office")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∞—É—Ç—Ñ–∏—Ç–∞:", reply_markup=reply_markup)

# ------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
async def style_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    style = query.data.replace("style_", "")
    items = OUTFITS.get(style, [])

    if not items:
        await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –≤–µ—â–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∏–ª—è üò¢")
        return

    # –í—ã–≤–æ–¥–∏–º –≤–µ—â–∏
    media_group = []
    for item in items:
        media_group.append(InputMediaPhoto(media=item["link"], caption=item["name"]))

    if media_group:
        await query.message.reply_media_group(media_group)

# ------------------------------
# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ GPT
async def gpt_outfit_request(style: str):
    """–ó–∞–≥–æ—Ç–æ–≤–∫–∞ ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å OpenAI"""
    # response = openai.ChatCompletion.create(
    #     model="gpt-4o-mini",
    #     messages=[{"role": "user", "content": f"–ü–æ–¥–±–µ—Ä–∏ –∞—É—Ç—Ñ–∏—Ç –≤ —Å—Ç–∏–ª–µ {style}"}]
    # )
    # return response["choices"][0]["message"]["content"]
    return f"–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ GPT –¥–ª—è —Å—Ç–∏–ª—è {style}"

# ------------------------------
def main():
    app = Application.builder().token(os.getenv("BOT_TOKEN")).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(style_handler))
app.run_polling()

if __name__ == "__main__":
    main()


